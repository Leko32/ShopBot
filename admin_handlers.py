import json

from aiogram import Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from button_state import set_button_status
from data import save_product_data
from handlers import product_data

# üëâ —Å—é–¥–∞ –≤–ø–∏—à–∏ ID —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /update
ADMIN_IDS = [1365015496, 5768435511, 7281613540]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

router = Router()


@router.message(Command("update"))
async def update_product_text(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    product_key = data.get("current_product")

    if not product_key:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")
        return

    text = message.text or ""  # –µ—Å–ª–∏ None, –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    parts = text.split(maxsplit=1)
    new_text = parts[1] if len(parts) > 1 else None
    photo = message.photo[-1].file_id if message.photo else None

    if product_key not in product_data:
        product_data[product_key] = {}

    if new_text:
        product_data[product_key]["text"] = new_text
    if photo:
        product_data[product_key]["photo"] = photo

    save_product_data(product_data)
    await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {product_key}!")


@router.message(F.text.startswith("/off "))
async def off_button(message: Message):
    button = message.text.split("/off ")[1].strip()
    set_button_status(button, False)
    await message.answer(f"üîï –ö–Ω–æ–ø–∫–∞ {button} —Å–∫—Ä—ã—Ç–∞.")


@router.message(F.text.startswith("/on "))
async def on_button(message: Message):
    button = message.text.split("/on ")[1].strip()
    set_button_status(button, True)
    await message.answer(f"üîî –ö–Ω–æ–ø–∫–∞ {button} –≤–∫–ª—é—á–µ–Ω–∞.")


# —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
def load_button_status():
    with open("buttons_status.json", "r", encoding="utf-8") as file:
        return json.load(file)


@router.message(Command("show"))
async def show_button_status(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        button_status = load_button_status()
        status_text = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–æ–∫:\n\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        for key, value in button_status.items():
            status_text += f"{key}: {'‚úÖ' if value else '‚ùå'}\n"

        await message.answer(status_text)


def register_admin_handlers(dp: Dispatcher):
    dp.include_router(router)
