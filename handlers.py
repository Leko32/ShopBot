from aiogram import Dispatcher, F, Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from data import load_product_data
from keyboards import (
    final_kb,
    generate_assortiment_kb,
    generate_china_kb,
    generate_hqd_kb,
    generate_pod_kb,
    generate_russia_kb,
    generate_snus_kb,
    generate_uk_kb,
    main_menu_kb,
)

router = Router()


product_data = load_product_data()


class ProductState:
    current_product = "current_product"


product_sections = {
    "hqd": {"text": "HQD –∞—Å—Å–æ—Ä—Ç üòé", "kb": generate_hqd_kb},
    "pod_system": {"text": "–í–æ—Ç POD-—Å–∏—Å—Ç–µ–º—ã üí®", "kb": generate_pod_kb},
    "snus": {"text": "–¢—É—Ç —Å–Ω—é—Å üëä", "kb": generate_snus_kb},
    "uk_liquids": {"text": "UK –∂–∏–¥–∫–æ—Å—Ç–∏ üá∫üá¶", "kb": generate_uk_kb},
    "china_liquids": {"text": "China –≤–∫—É—Å—ã üá®üá≥", "kb": generate_china_kb},
    "russia_liquids": {"text": "Russia –∂–∏–¥–∫–æ—Å—Ç–∏ üá∑üá∫", "kb": generate_russia_kb},
}


text_start = (
    "‚öúÔ∏èBreeze ‚Äî <b>–ª—É—á—à–µ–µ —á—Ç–æ –ø–æ–ø–∞–¥—ë—Ç –≤ —Ç–≤–æ–∏ –ª—ë–≥–∫–∏–µ!</b>\n"
    '–ë–µ—Ä–∏ —Ç–æ–ø–æ–≤—ã–µ –≤–∫—É—Å—ã –∏ –∑–∞–±—É–¥—å –ø—Ä–æ "–æ–ø—è—Ç—å —Ö–µ—Ä–Ω—è –≤–∫—É—Å".\n\n'
    "<b>üî∞–ß—Ç–æ —É –Ω–∞—Å –∫—Ä—É—Ç–æ–≥–æ:</b>\n"
    "‚úÖ–¢–æ–ª—å–∫–æ –±–æ–º–±–æ–≤—ã–µ –º–∏–∫—Å—ã\n"
    "‚úÖ100% –æ—Ä–∏–≥–∏–Ω–∞–ª\n"
    "‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ –≥–æ–ª–æ–≤–Ω—è–∫–∞\n"
    "‚úÖ –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
    "‚úÖ –ü–ª—é—à–∫–∏ –∏ –∞–∫—Ü–∏–∏ –¥–ª—è —Å–≤–æ–∏—Ö\n\n"
    "üí®–í—ã–±–∏—Ä–∞–π –≤—Å—ë —á—Ç–æ –ø–æ –¥—É—à–µ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –Ω–∏–∂–µüî•"
)

# –ö–æ–º–∞–Ω–¥–∞ /start


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(text_start, reply_markup=main_menu_kb)


# –ñ–ò–î–ö–û–°–¢–ò


@router.callback_query(F.data == "liquids")
async def show_liquids(callback: types.CallbackQuery):
    kb = generate_assortiment_kb()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)
    await callback.answer()


# –¢–£–¢ –ú–ï–ù–Ø–¢–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨–¨
@router.callback_query(F.data.in_(product_sections.keys()))
async def show_product_section(callback: types.CallbackQuery, state: FSMContext):
    key = callback.data
    await state.update_data(current_product=key)

    section = product_sections.get(key)
    if section:
        # –í–ê–ñ–ù–û: –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –æ–±—ä–µ–∫—Ç
        await callback.message.edit_text(section["text"], reply_markup=section["kb"]())
    else:
        await callback.message.edit_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()


@router.callback_query(
    F.data.in_(
        [
            "flonq_30",
            "solana_30",
            "hqd_10",
            "hqd_30",
            "elfliq_10",
            "elfliq_30",
            "anarchia",
            "elix_10",
            "elix_30",
            "chaser_black_5",
            "chaser_lux_5",
            "chaser_black_6_5",
            "chaser_lux_6_5",
            "lost_mary",
            "elf_x",
            "minican_4",
            "xros_mini",
            "xros_3_mini",
            "xros_4_mini",
            "xros_pro",
            "cuba_40",
            "cuba_150",
        ]
    )
)
async def show_product(callback: types.CallbackQuery, state: FSMContext):
    key = callback.data
    await state.update_data(current_product=key)
    product = product_data.get(key, {})
    text = product.get("text", "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    photo = product.get("photo")

    if photo:
        media = types.InputMediaPhoto(media=photo, caption=text)
        await callback.message.edit_media(media=media, reply_markup=final_kb)
    else:
        await callback.message.edit_text(text, reply_markup=final_kb)

    await callback.answer()


# –ë–≠–ö–ò –ù–ê–ó–ê–î


@router.callback_query(F.data == "back_to_main")
async def show_main(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", e)
    kb = generate_assortiment_kb()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)


def register_user_handlers(dp: Dispatcher):
    dp.include_router(router)
